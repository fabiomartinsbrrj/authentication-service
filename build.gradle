buildscript {
    ext {
        artifactoryRepository = {
            mavenCentral()
            jcenter()
        }

        kotlinVersion = '1.3.30'
        detektVersion = '1.0.1'
    }

    repositories artifactoryRepository

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${detektVersion}")
    }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'jacoco'

group 'com.fvm'
version '1.0-SNAPSHOT'
version = '1.0.0'
sourceCompatibility = 1.8
mainClassName = 'com.fvm.authenticationservice.AuthenticationServiceApplicationMain'

def buildDate = new Date()

repositories artifactoryRepository

idea {
    module {
        outputDir = compileJava.destinationDir
    }
}

sourceSets {
    componentTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
}

task componentTest(type: Test, description: 'Runs the integration tests.', group: 'verification') {
    testClassesDirs = sourceSets.componentTest.output.classesDirs
    classpath = sourceSets.componentTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

def processEnv = { Task env, File... variables ->
    variables.each {
        if (it.exists()) {
            it.readLines().each() {
                if (!it.isEmpty() && !it.startsWith("#")) {
                    def (String key, String value) = it.split('=', 2)
                    if (env != null) {
                        env.environment(key, value)
                        env.systemProperty(key, value)
                    }
                    System.setProperty(key, value)
                }
            }
        }
    }
}

[test, componentTest].each {
    def task = it
    it.doFirst {
        useJUnitPlatform()
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
}

dependencies {
    //core
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile 'org.jetbrains.kotlin:kotlin-reflect'

    //DI
    compile 'org.koin:koin-core:1.0.0'

    //Web
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.10.1'
    compile 'io.javalin:javalin:3.8.0'
    compile 'org.slf4j:slf4j-simple:1.7.25'

    //OpenAPI
    compile 'io.swagger.core.v3:swagger-core:2.0.9'
    compile 'org.webjars:swagger-ui:3.24.3'

    // Test dependencies
    testCompile 'org.junit.jupiter:junit-jupiter:5.4.2'
    testCompile 'org.mock-server:mockserver-netty:5.4.1'
    testCompile 'io.mockk:mockk:1.9.3'
    testCompile 'org.mockito:mockito-core:3.2.4'
    testCompile 'org.koin:koin-test:1.0.0'

    componentTestImplementation 'io.rest-assured:rest-assured:4.0.0'
}

detekt {
    detektVersion = "${detektVersion}"
    config = files("default-detekt-config.yml")
    reports {
        xml {
            enabled = true
            destination = file("build/reports/detekt.xml")
        }
        html {
            enabled = true
            destination = file("build/reports/detekt.html")
        }
    }
}

def ignorePackagesInJacocoReport = { classDirectories ->
    files(classDirectories.files.collect {
        fileTree(dir: it,
                exclude: [
                        'com/fvm/authenticationservice/AuthenticationServiceApplicationMain*',
                        'com/fvm/authenticationservice/application/AuthenticationServiceApplication*',
                        'com/fvm/authenticationservice/application/config/**',
                        'com/fvm/authenticationservice/application/domain/exceptions/**',
                        'com/fvm/authenticationservice/application/domain/entities/**',
                ])
    })
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.60
            }
        }
    }
    afterEvaluate {
        classDirectories = ignorePackagesInJacocoReport(classDirectories)
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
    afterEvaluate {
        classDirectories = ignorePackagesInJacocoReport(classDirectories)
    }
}

test.finalizedBy componentTest

dependencies {
    componentTestCompile configurations.testCompile
    componentTestImplementation configurations.testImplementation
    componentTestRuntime configurations.testRuntime
    componentTestRuntimeOnly configurations.testRuntimeOnly
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = "${sourceCompatibility}"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = "${sourceCompatibility}"
    }
}
compileComponentTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = "${sourceCompatibility}"
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'Authentication Service',
                'Implementation-Version': version,
                'Package-Version': version,
                'Build-Date': buildDate,
                'Main-Class': mainClassName
        )
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jacocoTestReport.dependsOn test
jacocoTestCoverageVerification.dependsOn test
test.finalizedBy jacocoTestReport
test.finalizedBy jacocoTestCoverageVerification
check.dependsOn test
check.dependsOn componentTest
